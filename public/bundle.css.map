{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/components/Login.svelte",
    "../src/components/Navbar.svelte",
    "../src/components/Input.svelte",
    "../src/components/Error.svelte",
    "../src/components/NavbarLink.svelte",
    "../src/components/Signup.svelte",
    "../src/components/NotFound.svelte",
    "../src/components/Loading.svelte",
    "../src/components/dashboard/Dashboard.svelte",
    "../src/components/dashboard/HasSessionIn24Hours.svelte",
    "../src/components/courses/AddStudentToCourse.svelte",
    "../src/components/notifications/NotificationList.svelte",
    "../src/components/Warning.svelte",
    "../src/components/DL.svelte",
    "../src/components/courses/CourseDetails.svelte",
    "../src/components/terms/CreateTerm.svelte",
    "../src/components/terms/TermDetails.svelte",
    "../src/components/sessions/SessionDetails.svelte",
    "../src/components/questions/QuestionDetails.svelte",
    "../src/components/notifications/NotificationItem.svelte",
    "../src/components/Modal.svelte",
    "../src/components/terms/TermsList.svelte",
    "../src/components/courses/AddTeacherToCourse.svelte",
    "../src/components/courses/DeleteCourse.svelte",
    "../src/components/courses/AddCourse.svelte",
    "../src/components/sessions/AddSession.svelte",
    "../src/components/terms/TermForm.svelte",
    "../src/components/questions/CreateQuestion.svelte",
    "../src/components/questions/CreateAnswer.svelte",
    "../src/components/courses/CategorizedCourseList.svelte",
    "../src/components/questions/DeleteQuestion.svelte",
    "../src/components/DatePicker.svelte",
    "../src/components/dashboard/StudentQuestionCard.svelte",
    "../src/components/dashboard/TeachersQuestions.svelte",
    "../src/components/sessions/SessionForm.svelte",
    "../src/components/dashboard/TeacherQuestionCard.svelte",
    "../src/components/courses/TermSelect.svelte",
    "../src/components/dashboard/TeacherAnswers.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { NotificationList } from './components/notifications'\n  import { auth } from './data/auth'\n  import Router, { location } from 'svelte-spa-router'\n  import routes from './routes'\n  import Login from './components/Login.svelte'\n  import Navbar from './components/Navbar.svelte'\n  import { nowSession } from './components/dashboard/stores'\n  import UpcomingSessions from './components/dashboard/UpcomingSessions.svelte'\n</script>\n\n<style>\n  main {\n    height: calc(100% - 5rem);\n    padding: 1rem;\n    margin: 0;\n  }\n</style>\n\n<Navbar />\n\n\n<main>\n\n  {#if $auth.username && !$nowSession}\n    <UpcomingSessions />\n  {/if}\n\n  {#if $auth.username || $location === '/signup'}\n    <Router {routes}/>\n  {:else}\n    <Login/>\n  {/if}\n        \n</main>\n  \n<NotificationList/>",
    "<script>\n  import { auth } from '../data/auth'\n  import { notifications } from './notifications'\n  import Input from './Input.svelte'\n  import Error from './Error.svelte'\n\n  let username = ''\n  let password = ''\n  let errors = ''\n  let loading = false\n  let show = false\n  let submit\n  let passInput\n  let form\n\n  const login = async () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    loading = true\n    submit.disabled = true\n    try {\n      await auth.login(username, password)\n      notifications.add({ text: `Logged in as '${username}'`, type: 'success' })\n    } catch (error) {\n      errors = error\n      notifications.add({ text: 'Login failed.', type: 'danger' })\n      submit.disabled = false\n    } finally {\n      loading = false\n    }\n  }\n  const showPassword = () => {\n    passInput.type = !show ? 'text' : 'password'\n    show = !show\n  }\n</script>\n\n<style>\n  .container-centered {\n    margin-top: 10vh;\n    display: flex;\n    justify-content: center;\n  }\n\n  .button.showhide {\n    width: 2.4rem;\n    border: none;\n  }\n</style>\n\n<svelte:head>\n  <title>Login</title>\n</svelte:head>\n\n<div class=\"container-centered\">\n  <div class=\"login\">\n    <h1 class=\"title\">Login</h1>\n    <h3 class=\"subtitle\">gotta log in to continue.</h3>\n\n    <Error {errors} />\n    <form bind:this={form} novalidate on:submit|preventDefault={login}>\n      <Input type=\"text\" bind:value={username} label=\"Student ID\" required leftIcon=\"user\" />\n\n      <label class=\"label\" for=\"passwordField\">Password</label>\n\n      <div class=\"field has-addons\">\n        <div class=\"control has-icons-left\">\n          <input bind:this={passInput} class=\"input\" bind:value={password} type=\"password\" required />\n          <span class=\"icon is-small is-left\">\n            <i class=\"fas fa-key\"></i>\n          </span>\n        </div>\n        <div class=\"control\">\n          <span class=\"button is-white showhide\" on:click={showPassword}>\n            {#if show}\n            <i class=\"fas fa-eye\"></i>\n            {:else}\n            <i class=\"fas fa-eye-slash\"></i>\n            {/if}\n          </span>\n        </div>\n      </div>\n      <div class=\"field\">\n        <div class=\"control\">\n          <button type=\"submit\"\n            class=\"button is-primary\"\n            class:is-loading={loading}\n            bind:this={submit}\n          >\n            Let me in!\n          </button>\n          <p>or</p>\n          <a href=\"#/signup\" class=\"button\">Create account</a>\n        </div>\n      </div>\n    </form>\n    </div>\n  </div>",
    "<script>\n  import { auth } from '../data/auth'\n  import NavbarLink from './NavbarLink.svelte'\n  import { notifications } from './notifications'\n  let showMenu = false\n  const logout = async () => {\n    const username = await auth.logout()\n    notifications.add({ text: `Logged out user '${username}'`, type: 'success' })\n  }\n</script>\n\n<style>\n  .logo {\n    margin-right: 0.8rem;\n  }\n\n  .navbar {\n    background: transparent;\n    margin: 0;\n  }\n\n  @media only screen and (max-width: 1024px) {\n    #navmenu {\n      padding: 1rem;\n      position: fixed;\n      right: -15rem;\n      width: 15rem;\n      display: inherit;\n      top: 0;\n      bottom: 0;\n      transition: 200ms ease-in-out;\n      height: 100%;\n      background: black;\n    }\n\n    .navbar-burger {\n      z-index: 10;\n    }\n\n    #navmenu.is-active {\n      transform: translate(-15rem);\n    }\n  }\n</style>\n\n<nav class=\"navbar is-black\" role=\"navigation\" aria-label=\"main navigation\">\n  <div class=\"navbar-brand\">\n    <a class=\"navbar-item\" href=\"#/\">\n      <img class=\"logo\" src=\"/kumu-logo.png\" height=\"28\" alt=\"levitation logo\" />\n      <span class=\"title is-4\">InstaQuiz</span>\n    </a>\n\n    {#if $auth.username}\n      <div\n        role=\"button\"\n        class=\"navbar-burger burger\"\n        class:is-active={showMenu}\n        aria-label=\"menu\"\n        aria-expanded=\"false\"\n        data-target=\"navmenu\"\n        on:click={() => { showMenu = !showMenu }}\n      >\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n      </div>\n    {/if}\n    </div>\n  \n  \n    <div\n      id=\"navmenu\"\n      class=\"navbar-menu\"\n      on:click={() => { showMenu = !showMenu }}\n      class:is-active={showMenu}\n    >\n      <div class=\"navbar-start\">\n        {#if $auth.username}\n        <NavbarLink url=\"#/\" text=\"Dashboard\" icon=\"chalkboard-teacher\" />\n        <NavbarLink url=\"#/terms\" text=\"Terms\" icon=\"school\" />\n        <NavbarLink url=\"#/courses\" text=\"Courses\" icon=\"book\" />\n        {/if}\n      </div>\n  \n      <div class=\"navbar-end\">\n        {#if $auth.name}\n        \n          <NavbarLink url=\"#/me\" icon=\"user-circle\" text={$auth.name}/>\n         \n          <div class=\"buttons\">\n            <button class=\"button is-text\" on:click={logout}>\n                  <strong>Log out</strong>\n              </button>\n          </div>\n\n        {/if}\n      </div>\n    </div>\n  </nav>",
    "<script>\n  let input\n  export let value\n  export let showDescription = false\n  export let label = ''\n  let error = false\n  export let required = false\n  export let pattern = '^.+$'\n  export let minlength = 1\n  export let maxlength = 100\n  export let type = 'text'\n  export let description = ''\n  export let width = '40rem'\n  export let min = null\n  export let max = null\n  export let rightIcon = null\n  export let leftIcon = null\n  export let placeholder = ''\n\n  $: name = label.replace(/\\W+(.)/g, (match, chr) => chr.toUpperCase())\n  $: descriptionId = `description${name}`\n\n  function checkValidity () {\n    error =\n      !input.validity.valid && input.validationMessage\n        ? input.validationMessage\n        : ''\n  }\n</script>\n\n<div class=\"field\">\n  <label class=\"label\">{label} {#if description}\n    <p class=\"help is-info\" id=\"{descriptionId}\">{description}</p>\n    {/if}\n  </label>\n  <div class=\"field-body\">\n    <div\n      class=\"control\"\n      class:has-icons-left=\"{leftIcon}\"\n      class:has-icons-right=\"{rightIcon}\"\n    >\n      {#if type === 'text'}\n      <input\n        bind:this=\"{input}\"\n        {name}\n        class=\"input\"\n        bind:value\n        class:error=\"{error}\"\n        type=\"text\"\n        {pattern}\n        {minlength}\n        {maxlength}\n        {required}\n        aria-describedby=\"{descriptionId}\"\n        on:input=\"{checkValidity}\"\n        on:invalid|preventDefault=\"{checkValidity}\"\n        {placeholder}\n      />\n      {/if} \n      {#if type === 'password'}\n      <input\n        bind:this=\"{input}\"\n        {name}\n        class=\"input\"\n        bind:value\n        class:error=\"{error}\"\n        type=\"password\"\n        {pattern}\n        {minlength}\n        {maxlength}\n        {required}\n        aria-describedby=\"{descriptionId}\"\n        on:input=\"{checkValidity}\"\n        on:invalid|preventDefault=\"{checkValidity}\"\n        {placeholder}\n      />\n      {/if} \n      {#if type === 'date'}\n      <input\n        bind:this=\"{input}\"\n        {name}\n        class=\"input\"\n        bind:value\n        class:error=\"{error}\"\n        type=\"date\"\n        pattern=\"^[0-9]{4}-(1[0-2]|0[1-9])-([1-3][0-9]|0[1-9])$\"\n        {required}\n        {min}\n        {max}\n        aria-describedby=\"{descriptionId}\"\n        on:input=\"{checkValidity}\"\n        on:invalid|preventDefault=\"{checkValidity}\"\n      />\n      {/if} \n      {#if type === 'datetime-local'}\n      <input\n        bind:this=\"{input}\"\n        {name}\n        class=\"input\"\n        bind:value\n        class:error=\"{error}\"\n        type=\"datetime-local\"\n        {required}\n        {min}\n        {max}\n        aria-describedby=\"{descriptionId}\"\n        on:input=\"{checkValidity}\"\n        on:invalid|preventDefault=\"{checkValidity}\"\n      />\n      {/if} \n      {#if type === 'number'}\n      <input\n        bind:this=\"{input}\"\n        {name}\n        class=\"input\"\n        bind:value\n        class:error=\"{error}\"\n        type=\"number\"\n        {required}\n        {max}\n        {min}\n        aria-describedby=\"{descriptionId}\"\n        on:input=\"{checkValidity}\"\n        on:invalid|preventDefault=\"{checkValidity}\"\n      />\n      {/if}\n      {#if leftIcon}\n      <span class=\"icon is-small is-left\">\n        <i class=\"fas fa-{leftIcon}\"></i>\n      </span>\n      {/if} {#if rightIcon}\n      <span class=\"icon is-small is-right\">\n        <i class=\"fas fa-{rightIcon}\"></i>\n      </span>\n      {/if} {#if error}\n      <p class=\"help is-danger\">{error}</p>\n      {/if}\n    </div>\n  </div>\n</div>\n\n<style>\n  input {\n    max-width: 40rem;\n  }\n</style>",
    "<script>\n  export let errors = ''\n\n  const getMessage = (errors) => {\n    if (!errors) return false\n    return (Array.isArray(errors))\n      ? errors.map(error => error.message).join('\\n')\n      : !errors.message ? errors : errors.message\n  }\n</script>\n\n<style>\n  .error {\n    background: #220000;\n    border-left: 2px solid #ff5555;\n    color: #ff5555;\n    padding: 0.3rem 0.6rem;\n    margin-bottom: 1rem;\n  }\n\n  .error strong {\n    color: inherit;\n  }\n\n  .error-message i {\n    margin-right: 0.3rem;\n  }\n</style>\n\n{#if getMessage(errors)}\n<p class=\"error\">\n    <span class=\"error-message\"><i class=\"fas fa-exclamation-triangle\"></i><strong>Error:</strong>&nbsp;{getMessage(errors)}</span>\n</p>\n{/if}",
    "<script>\n  export let url = ''\n  export let text = ''\n  export let icon = null\n</script>\n\n<style>\n  i {\n    margin-right: 0.3rem;\n    width: 20px;\n    text-align: center;\n  }\n\n  @media only screen and (max-width: 1024px) {\n    :global(a.active) {\n      border-radius: 4px;\n      color: #cb2d6f;\n      font-weight: bold;\n      background-color: inherit;\n    }\n  }\n</style>\n\n<a class=\"navbar-item\" href=\"{url}\">\n  {#if icon}\n  <i class=\"fas fa-{icon}\"></i>\n  {/if} {text}\n</a>",
    "<script>\n  import { auth } from '../data/auth'\n  import { notifications } from './notifications'\n  import Input from './Input.svelte'\n  import Error from './Error.svelte'\n  import { push } from 'svelte-spa-router'\n\n  let username = ''\n  let name = ''\n  let password = ''\n  let confirmpass = ''\n  let errors = ''\n  let loading = false\n  let submit\n  let form\n\n  const signup = async () => {\n    let isValid = form.checkValidity()\n    if (password !== confirmpass) {\n      errors = 'Passwords do not match.'\n      isValid = false\n    }\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    loading = true\n    submit.disabled = true\n    try {\n      await auth.signup(username, name, password)\n      errors = ''\n      notifications.add({ text: `Created account for '${username}'`, type: 'success' })\n      push('/join-course')\n    } catch (error) {\n      errors = error\n      notifications.add({ text: 'registration failed.', type: 'danger' })\n      submit.disabled = false\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  .container-centered {\n    margin-top: 10vh;\n    display: flex;\n    justify-content: center;\n  }\n</style>\n\n<svelte:head>\n  <title>Signup</title>\n</svelte:head>\n\n<div class=\"container-centered\">\n  <div class=\"login\">\n    <h1 class=\"title\">Create an acount</h1>\n\n    <Error {errors} />\n    <form bind:this={form} novalidate on:submit|preventDefault={signup}>\n      <Input type=\"text\" bind:value={username} label=\"Student ID\" required leftIcon=\"id-card\" />\n\n      <Input type=\"text\" bind:value={name} label=\"Name\" required leftIcon=\"user\" />\n\n      <Input type=\"password\" bind:value={password} label=\"Password\" required leftIcon=\"key\" />\n      <Input type=\"password\" label=\"Confirm password\" bind:value={confirmpass} leftIcon=\"check\" />\n      <div class=\"field\">\n        <div class=\"control\">\n          <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={submit}>\n            Register\n          </button>\n          <p>or</p>\n          <a href=\"#/login\" class=\"button\">Log in with existing account</a>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>",
    "<script>\n  import { location, pop } from 'svelte-spa-router'\n</script>\n<style>\n  .container {\n    margin: 4rem;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n  }\n\n  .primary {\n    color: #cb2d6f;\n  }\n\n  .button {\n    margin-top: 1rem;\n  }\n</style>\n\n<div class=\"container\">\n  <section>\n    <h1 class=\"title is-1 primary\">\n      <i class=\"fas fa-frown-open\"></i>&nbsp;404\n    </h1>\n    <h2 class=\"subtitle is-3\">resource not found</h2>\n\n    <p>The path '{$location}' leads nowhere</p>\n    <p>It might be wise to return to the <a href=\"#/\">main page</a>.</p>\n    <button on:click={() => pop()} class=\"button is-link\"><i class=\"fas fa-backward\"></i>&nbsp;go back</button>\n  </section>\n</div>",
    "<script>\n  export let what = 'things'\n</script>\n\n<style>\n  div {\n    width: 100%;\n    text-align: center;\n    padding: 1rem;\n  }\n\n  .spinner {\n    color: #14a098;\n    width: 3rem;\n    padding: 0.5rem;\n  }\n</style>\n\n<div>\n  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"circle-notch\"\n    class=\"svg-inline--fa fa-circle-notch fa-w-16 fa-spin spinner\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 512 512\">\n    <path fill=\"currentColor\"\n      d=\"M288 39.056v16.659c0 10.804 7.281 20.159 17.686 23.066C383.204 100.434 440 171.518 440 256c0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-84.47 56.786-155.564 134.312-177.219C216.719 75.874 224 66.517 224 55.712V39.064c0-15.709-14.834-27.153-30.046-23.234C86.603 43.482 7.394 141.206 8.003 257.332c.72 137.052 111.477 246.956 248.531 246.667C393.255 503.711 504 392.788 504 256c0-115.633-79.14-212.779-186.211-240.236C302.678 11.889 288 23.456 288 39.056z\">\n    </path>\n  </svg>\n  <p>\n    Loading {what} ...\n  </p>\n</div>",
    "<script>\n  import { formatDistanceStrict } from 'date-fns'\n  import TermsLoader from '../terms/TermsLoader.svelte'\n  import { nowSession, imminentSession } from './stores'\n  import ActiveSession from './ActiveSession.svelte'\n</script>\n\n<style>\n  .countdown {\n    padding: 2rem;\n    text-align: center;\n    font-size: 2rem;\n  }\n\n  .big {\n    font-size: 3rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Dashboard</title>\n</svelte:head>\n\n{#if $nowSession}\n  <ActiveSession />\n{:else if $imminentSession}\n<section class=\"countdown\">\n    <h2 class=\"title is-3\">{$imminentSession.course.name}</h2> \n      <h2 class=\"subtitle is-5\">Lesson {$imminentSession.order}</h2>\n      <p>starts in...</p>\n    <p class=\"big\">{formatDistanceStrict(new Date($imminentSession.startsAt), new Date(), { addSuffix: true })}</p>\n</section>\n  {:else}\n  <TermsLoader />\n{/if}",
    "<script>\n  import { location } from 'svelte-spa-router'\n  import { formatRelative, formatDistanceToNow } from 'date-fns'\n  import Warning from '../Warning.svelte'\n  import { every15Seconds, time, imminentSession, nowSession } from './stores'\n\n  export let sessions\n\n  const formatDate = (date) => {\n    const string = formatRelative(new Date(date), new Date())\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n\n  // if there is a session about to start then update every second\n  $: now = $imminentSession ? $time : $every15Seconds\n  $: soon = new Date(now.getTime() + 10 * 6e+4)\n  // keep checking if there is a session currently on\n  $: {\n    const ongoing = sessions.find(s => s.startsAt < now.toJSON() &&\n      s.endsAt > now.toJSON())\n    if (ongoing) {\n      nowSession.set(ongoing)\n      imminentSession.set()\n    } else {\n      // if no ongoing session check if there is one soon\n      imminentSession.set(sessions.find(s => s.startsAt < soon.toJSON() &&\n        s.startsAt > now.toJSON()))\n    }\n  }\n\n  // also update the upcoming sessions every 15 seconds\n  $: in24Hours = new Date($every15Seconds.getTime() + 24 * 3.6e+6)\n  $: todaySessions = sessions.filter(s => {\n    return s.startsAt > now.toJSON() &&\n      s.endsAt < in24Hours.toJSON()\n  })\n</script>\n\n<style>\n  .button i {\n    margin-right: 0.5rem;\n  }\n</style>\n\n{#if $nowSession && $location !== '/'}\n  <Warning title=\"{$nowSession.course.name} lesson {$nowSession.order} has started.\">\n    <p>Started {formatDistanceToNow(new Date($nowSession.startsAt), { addSuffix: true })}.\n      Ends {formatDate($nowSession.endsAt, { addSuffix: true })}.</p>\n    <a class=\"button is-link\" href=\"#/\"><i class=\"fas fa-running\"></i>Go there now</a>\n  </Warning>\n{:else if !$nowSession && $imminentSession && $location !== '/'}\n<Warning title=\"{$imminentSession.course.name} lesson {$imminentSession.order} starts soon.\">\n    <p>Starts {formatDistanceToNow(new Date($imminentSession.startsAt), { addSuffix: true })}.\n      Ends {formatDate($imminentSession.endsAt, { addSuffix: true })}.</p>\n    <a class=\"button is-link\" href=\"#/\"><i class=\"fas fa-running\"></i>Go there now</a>\n  </Warning>\n{:else if !$nowSession && !$imminentSession}\n<Warning title=\"{todaySessions.length} classes in the next 24 hours\">\n  <div class=\"upcoming-sessions\">\n    {#each todaySessions as session (session.id) }\n        <li><a href=\"#/session/{session.id}\">\n          {session.course.name} - {formatDate(session.startsAt)}.\n        </a></li>\n      {/each}\n    </div>\n  </Warning>\n{/if}",
    "<script>\n  import { push } from 'svelte-spa-router'\n  import { mutate } from 'svelte-apollo'\n  import { notifications } from '../notifications'\n  import { auth } from '../../data/auth'\n  import { ADD_STUDENT_TO_COURSE } from '../../data/mutations'\n  import { client } from '../../data/apollo'\n  import Input from '../Input.svelte'\n  import Error from '../Error.svelte'\n\n  let code = ''\n  let form\n  let submit\n  let loading = false\n  let errors = ''\n\n  const join = async () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    loading = true\n    submit.disabled = true\n    try {\n      const response = await mutate(client, {\n        mutation: ADD_STUDENT_TO_COURSE,\n        variables: { id: $auth.id, code }\n      })\n      errors = ''\n      notifications.add({ text: `Student ${$auth.name} added to ${response.data.addStudentToCourse.name}`, type: 'success' })\n      push('/')\n    } catch (error) {\n      errors = error\n      notifications.add({ text: 'registration failed.', type: 'danger' })\n    } finally {\n      loading = false\n      submit.disabled = false\n    }\n  }\n</script>\n\n<style>\n  .container-centered {\n    margin-top: 10vh;\n    display: flex;\n    justify-content: center;\n  }\n</style>\n\n<div class=\"container-centered\">\n  <div class=\"join-course\">\n\n    <h1 class=\"title\">Join a course</h1>\n\n    <p>\n      Simply enter the code word given by your instructor and you'll be added to\n      the course roster.\n    </p>\n\n    <br />\n\n    <Error {errors} />\n    <form bind:this=\"{form}\" novalidate on:submit|preventDefault=\"{join}\">\n      <Input label=\"Code word\" bind:value=\"{code}\" required />\n\n      <button type=\"submit\" class=\"button is-primary\" class:is-loading=\"{loading}\" bind:this=\"{submit}\">\n        Join!\n      </button>\n    </form>\n  </div>\n</div>",
    "<script>\n  import { fly } from 'svelte/transition'\n  import NotificationItem from './NotificationItem.svelte'\n  import { notifications } from './data'\n</script>\n\n<style>\n  .notification-list {\n    display: flex;\n    flex-direction: column;\n    position: fixed;\n    top: 3rem;\n    right: 0;\n    margin: 0.5rem;\n    width: auto;\n    max-width: calc(100% - 4rem);\n    z-index: 99;\n  }\n\n  .notification {\n    list-style: none;\n    /* padding: 0 1rem; */\n    /* margin: 0.5rem; */\n    /* box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.2); */\n    width: 100%;\n    background-color: var(--background);\n  }\n</style>\n\n{#if $notifications}\n<div class=\"notification-list\">\n  {#each Object.entries($notifications) as [id, message] (id)}\n  <div transition:fly=\"{{ x: 400 }}\" >\n      <NotificationItem message={message} id={id} />\n  </div>\n   \n  {/each}\n</div>\n{/if}",
    "<script>\n  export let title = 'Warning'\n</script>\n\n<style>\n  .warning {\n    border: 1px solid #ffdd57;\n    color: #ffdd57;\n    margin-bottom: 1rem;\n  }\n\n  .warning :global(strong) {\n    color: inherit;\n  }\n\n  .warning-message-header {\n    margin: 0;\n    padding: 0.3rem 0.5rem;\n    background: #ffdd57;\n    color: black;\n    font-size: 1.2rem;\n  }\n\n  .warning-message-header i {\n    margin-right: 0.3rem;\n  }\n\n  .warning-message-body {\n    padding: 0.3rem 0.6rem;\n  }\n</style>\n\n<div class=\"warning\">\n  <p class=\"warning-message-header\">\n    <i class=\"fas fa-exclamation-triangle\"></i>\n    {title}\n  </p>\n  <section class=\"warning-message-body\">\n    <slot></slot>\n  </section>\n</div>",
    "<style>\n  dl {\n    display: grid;\n    grid-column-gap: 0.5rem;\n    grid-template-columns: [key] auto [value] auto;\n    grid-template-rows: auto;\n    justify-content: start;\n  }\n\n  dl :global(dt) {\n    grid-column: key;\n    justify-self: end;\n    font-weight: bold;\n  }\n\n  dl :global(dd) {\n    grid-column: value;\n    justify-self: start;\n  }\n</style>\n\n<dl>\n  <slot></slot>\n</dl>",
    "<script>\n  import { formatRelative } from 'date-fns'\n  import { pop } from 'svelte-spa-router'\n  import { auth } from '../../data/auth'\n  import AddTeacherToCourse from './AddTeacherToCourse.svelte'\n  import RemoveTeacherFromCourse from './RemoveTeacherFromCourse.svelte'\n  import DeleteCourse from './DeleteCourse.svelte'\n  import AddSession from '../sessions/AddSession.svelte'\n\n  export let course\n\n  $: isCourseTeacher = course.teachers.find(t => t.id === $auth.id)\n  $: isEnrolled = course.students.find(t => t.id === $auth.id)\n  $: teacherNames = course.teachers.map(teacher => {\n    return $auth.id === teacher.id ? 'You' : teacher.name\n  })\n  const now = new Date().toJSON()\n  $: past = course.sessions.filter(s => s.endsAt < now).sort((a, b) => b.startsAt.localeCompare(a.startsAt))\n  $: future = course.sessions.filter(s => s.endsAt > now).sort((a, b) => a.startsAt.localeCompare(b.startsAt))\n\n  const formatDate = (date) => {\n    const string = formatRelative(new Date(date), new Date())\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n</script>\n\n<style>\n  .subtitle span {\n    margin-right: 0.5rem;\n  }\n\n  .course-details {\n    padding: 1rem;\n  }\n\n  .buttons {\n    margin-top: 0.5rem;\n  }\n\n  li {\n    list-style: none;\n  }\n\n  dl {\n    display: grid;\n    grid-column-gap: 1rem;\n    grid-template-columns: [key] auto [value] auto;\n    grid-template-rows: auto;\n    justify-content: start;\n  }\n\n  dl dt {\n    grid-column: key;\n    justify-self: start;\n    font-weight: bold;\n  }\n\n  dl dd {\n    grid-column: value;\n    justify-self: start;\n  }\n\n  .sessions {\n    margin: 2rem 0 1rem 0;\n  }\n</style>\n\n<svelte:head>\n  <title>{course.name}</title>\n</svelte:head>\n\n<h1 class=\"title is-3\">{course.name}</h1>\n<p class=\"subtitle\">\n  {#if $auth.role === 'Teacher'}\n      <span>You are{!isCourseTeacher ? \"n't\" : ''} a teacher for this class.</span>\n    {#if !isCourseTeacher}\n      <AddTeacherToCourse user={$auth.id} {course} />\n    {:else}\n      <RemoveTeacherFromCourse user={$auth.id} {course} />\n    {/if}\n  {:else}\n    You are{!isEnrolled ? \"n't\" : ''} enrolled in this class.\n  {/if}\n</p>\n\n\n<div class=\"course-details\">\n  <dl>\n    <dt>Teacher(s):</dt>\n    <dd>\n      {teacherNames.length > 0 ? teacherNames.join(', ') : 'none'}\n    </dd>\n    <dt>Students:</dt>\n    <dd>{course.students.length}</dd>\n  </dl>\n\n  {#if $auth.role === 'Teacher'}\n    <div class=\"sessions\">\n      <h3 class=\"title is-5\">Current and future sessions</h3>\n      {#if future.length > 0}\n        {#each future as session (session.id)}\n          <li>\n            <a href=\"#/session/{session.id}\">\n              {session.order}. {formatDate(session.startsAt)}\n            </a>\n          </li>\n        {/each}\n      {/if}\n      <AddSession courseId={course.id} />\n    </div>\n  {/if}  \n\n  {#if past.length > 0}\n    <div class=\"sessions\">\n      <h3 class=\"title is-5\">Past sessions</h3>\n      {#each past as session (session.id)}\n        <li>\n          <a href=\"#/session/{session.id}\">\n            {session.order}. {formatDate(session.startsAt)}\n          </a>\n        </li>\n      {/each}\n    </div>\n  {/if}\n\n  <div class=\"buttons\">\n    {#if $auth.role === 'Teacher'}\n        <!-- Can't be deleted if it has session connection -->\n      {#if !course.sessions || course.sessions.length === 0}\n        <DeleteCourse {course} on:delete={() => pop('/')} />\n      {/if}\n   \n    {/if}\n  </div>\n  \n</div>",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { notifications } from '../notifications'\n  import Modal from '../Modal.svelte'\n  import TermForm from './TermForm.svelte'\n  import { CREATE_TERM } from '../../data/mutations'\n  import { TERMS_AND_ALL } from '../../data/queries'\n\n  let loading = false\n  let errors = ''\n  let open = false\n\n  const reset = () => {\n    errors = ''\n    open = false\n  }\n\n  const save = async ({ detail }) => {\n    loading = true\n    try {\n      await mutate(client, {\n        mutation: CREATE_TERM,\n        variables: { ...detail },\n        update: (cache, { data: { createTerm } }) => {\n          const data = cache.readQuery({ query: TERMS_AND_ALL })\n          data.terms.push(createTerm)\n          cache.writeQuery({ query: TERMS_AND_ALL, data })\n        }\n      })\n      notifications.add({ text: `Saved new term '${detail.name}'`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({\n        text: 'Could not save new term.',\n        type: 'danger'\n      })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n\n  button {\n    margin: 1rem 0;\n  }\n</style>\n\n<button class=\"button is-primary\" on:click={() => { open = true }}><i class=\"fas fa-plus\"></i>Create a term</button>\n<Modal bind:open>\n  <TermForm on:reset={reset} on:submit={save} {errors} {loading} />\n</Modal>",
    "<script>\n  import { formatRelative } from 'date-fns'\n  import { auth } from '../../data/auth'\n  import CategorizedCourseList from '../courses/CategorizedCourseList.svelte'\n  import AddCourse from '../courses/AddCourse.svelte'\n\n  export let term\n\n  const format = (date) => {\n    const string = formatRelative(new Date(date), new Date())\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n</script>\n\n<style>\n  section.term {\n    margin: 2rem 1rem;\n  }\n</style>\n\n<svelte:head>\n  <title>{term.name}</title>\n</svelte:head>\n\n<h1 class=\"title is-3\">{term.name}</h1>\n<p class=\"subtitle\">{format(term.startDate)} to {format(term.endDate)}</p>\n\n<section class=\"term\">\n  <CategorizedCourseList courses={term.courses} />\n\n  {#if $auth.role === 'Teacher'}\n    <AddCourse termId={term.id} />\n  {/if}\n</section>",
    "<script>\n  import { formatRelative } from 'date-fns'\n  import CreateQuestion from '../questions/CreateQuestion.svelte'\n  import { auth } from '../../data/auth'\n\n  export let session\n\n  const formatDate = (date) => {\n    const string = formatRelative(new Date(date), new Date())\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n</script>\n\n<style>\n  section {\n    margin: 1rem;\n  }\n\n  li {\n    list-style-type: none;\n  }\n</style>\n\n<h1 class=\"title is-3\">Lesson {session.order}</h1>\n<p class=\"subtitle\">{formatDate(session.startsAt)} to {formatDate(session.endsAt)}</p>\n\n<br>\n\n<h2 class=\"title is-4\">{session.questions.length} Questions</h2>\n\n{#if $auth.role === 'Teacher'}\n  <CreateQuestion sessionId={session.id} />\n{/if}\n\n<section class=\"question-list\">\n  {#if session.questions && session.questions.length > 0}\n    {#each session.questions as question (question.id)}\n      <li>\n        {question.order + 1}. <a href=\"#/question/{question.id}\">{question.text}</a>\n      </li>\n    {/each}\n  {/if}\n</section>",
    "<script>\n  import DeleteQuestion from './DeleteQuestion.svelte'\n  import CreateAnswer from './CreateAnswer.svelte'\n  import DeleteAnswer from './DeleteAnswer.svelte'\n  import { auth } from '../../data/auth'\n\n  export let question\n</script>\n\n<style>\n  li {\n    list-style-type: none;\n    margin: 1rem;\n  }\n\n  .answers {\n    padding: 1rem;\n  }\n</style>\n\n<h1 class=\"title\">Question {question.order + 1}</h1>\n\n<h2 class=\"title is-5\">{question.text}</h2>\n\n{#if $auth.role === 'Teacher'}\n  <CreateAnswer questionId={question.id} />\n{/if}\n\n<section class=\"answers\">\n  {#if question.answers.length > 0}\n    <ul>\n      {#each question.answers as answer (answer.id)}\n        <li>{answer.text} \n          {#if answer.responses.length === 0 && $auth.role === 'Teacher'}\n            <DeleteAnswer id={answer.id} questionId={question.id} />\n          {/if}\n        </li>\n      {/each}\n    </ul>\n  {/if}\n</section>\n\n{#if question.answers.length === 0 && $auth.role === 'Teacher'}\n  <DeleteQuestion id={question.id} sessionId={question.session.id} />\n{/if}\n\n ",
    "<script>\n  import { notifications } from './data'\n\n  export let id\n  export let message\n\n  $: text = !message || typeof message === 'string' ? message : message.text\n  $: type = !message || typeof message === 'string' ? 'info' : message.type\n\n  const remove = () => notifications.remove(id)\n</script>\n\n\n<div class=\"notification is-{type}\">\n  <button class=\"delete\" on:click={remove}></button>\n  {text}\n</div>\n\n<style>\n  .notification {\n    margin-bottom: 0.5rem;\n  }\n</style>",
    "<script>\n  import { fade, fly } from 'svelte/transition'\n\n  export let open = false\n\n  const close = () => { open = false }\n</script>\n\n<style>\n  .modal-content {\n    background: black;\n    display: flex;\n    justify-content: center;\n    border-radius: 4px;\n  }\n\n  .modal-content section {\n    padding: 2rem;\n  }\n</style>\n\n{#if open}\n  <div class=\"modal is-active\">\n    <div class=\"modal-background\" on:click={close} transition:fade|local=\"{{ duration: 200 }}\"></div>\n    <div class=\"modal-content is-clipped\" in:fly=\"{{ duration: 200, y: -300 }}\" out:fly=\"{{ duration: 200, y: 300 }}\">\n      <section class=\"section\">\n       <slot></slot>\n      </section>\n    </div>\n  </div>\n  {/if}",
    "<script>\n  import { auth } from '../../data/auth'\n  import AddCourse from '../courses/AddCourse.svelte'\n  import CategorizedCourseList from '../courses/CategorizedCourseList.svelte'\n  import CreateTerm from './CreateTerm.svelte'\n\n  export let terms\n\n  const now = new Date().toJSON()\n\n  $: currentTerm = terms && terms.find(t => t.startDate < now && t.endDate > now)\n  $: nextTerm = terms && terms.find(t => t.startDate > now)\n  $: otherTerms = terms && terms.filter(t => {\n    if (currentTerm && t.id === currentTerm.id) return false\n    if (nextTerm && t.id === nextTerm.id) return false\n    return true\n  })\n</script>\n\n<style>\n  section.term {\n    margin: 2rem 1rem;\n  }\n</style>\n\n{#if !currentTerm}\n  <p>There is no term currently in session.</p>\n{:else}\n\n  <section class=\"term\">\n\n    {#if currentTerm.courses}\n      <h2 class=\"title is-4\">Current term: {currentTerm.name} </h2>\n      <CategorizedCourseList courses={currentTerm.courses} />\n      {#if $auth.role === 'Teacher'}\n        <AddCourse termId={currentTerm.id} />\n      {/if}\n    {/if} <!-- currentTerm.courses -->\n\n  </section>\n\n{/if} <!-- !currentTerm -->\n\n{#if $auth.role === 'Teacher'}\n  {#if !nextTerm}\n\n    <p>There are also no upcoming terms recorded yet.</p>\n    <CreateTerm/>\n\n  {:else}\n\n    <section class=\"term\">\n      {#if nextTerm.courses}\n        <h2 class=\"title is-4\">Next term: {nextTerm.name}</h2>\n        <CategorizedCourseList courses={nextTerm.courses} />\n        <AddCourse termId={nextTerm.id} />\n      {/if} <!-- nextTerm.courses -->\n    </section>\n\n  {/if} <!-- !nextTerm -->\n\n  {#each otherTerms as term (term.id)}\n    <section class=\"term\">\n      <h2 class=\"title is-4\">{term.name}</h2>\n      {#if term.courses && term.courses.length > 0}\n        <CategorizedCourseList courses={term.courses} />\n      {/if}\n      <AddCourse termId={term.id} />\n    </section>\n  {/each}\n{/if} <!-- $auth.role === 'Teacher -->\n\n{#if $auth.role === 'Student'}\n  <a href=\"#/join-course\" class=\"button\">Join a course</a>\n{/if}",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { notifications } from '../notifications'\n  import { ADD_TEACHER_TO_COURSE } from '../../data/mutations'\n\n  export let user\n  export let course\n  let loading = false\n\n  const joinCourse = async () => {\n    loading = true\n    try {\n      const response = await mutate(client, {\n        mutation: ADD_TEACHER_TO_COURSE,\n        variables: { id: user, courseId: course.id }\n      })\n      notifications.add({ text: `Successfully added teacher to ${response.data.addTeacherToCourse.name}`, type: 'success' })\n    } catch (error) {\n      console.error(error)\n      notifications.add({ text: 'Failed to add teacher to course', type: 'danger' })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n</style>\n\n<button class=\"button is-small\" class:is-loading={loading} on:click={joinCourse}><i\n    class=\"fas fa-user-plus\"></i>Join</button>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import { mutate } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { DELETE_COURSE } from '../../data/mutations'\n  import { TERMS_AND_ALL } from '../../data/queries'\n\n  export let course\n  const loading = false\n\n  const dispatch = createEventDispatcher()\n\n  const remove = async () => {\n    try {\n      await mutate(client, {\n        mutation: DELETE_COURSE,\n        variables: { id: course.id },\n        update: (cache, { data: { deleteCourse } }) => {\n          const data = cache.readQuery({ query: TERMS_AND_ALL })\n          let courseIndex = null\n          const termIndex = data.terms.findIndex(t => {\n            courseIndex = t.courses.findIndex(c => c.id === course.id)\n            return courseIndex > -1\n          })\n          data.terms[termIndex].courses.splice(courseIndex, 1)\n          cache.writeQuery({ query: TERMS_AND_ALL, data })\n        }\n      })\n      notifications.add({ text: 'Course delete successfully', type: 'success' })\n      dispatch('delete')\n    } catch (error) {\n      notifications.add({ text: 'Course could not be deleted', type: 'danger' })\n    }\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n</style>\n\n<button class=\"button\" class:is_loading={loading} on:click={remove}><i class=\"fas fa-trash\"></i>Delete Course</button>",
    "<script>\n  import Modal from '../Modal.svelte'\n  import { mutate } from 'svelte-apollo'\n  import CourseForm from './CourseForm.svelte'\n  import { notifications } from '../notifications'\n  import { CREATE_COURSE } from '../../data/mutations'\n  import { TERMS_AND_ALL } from '../../data/queries'\n  import { client } from '../../data/apollo'\n\n  let errors = ''\n  let open = false\n  let loading = false\n  export let termId = ''\n\n  const reset = () => {\n    errors = ''\n    open = false\n  }\n\n  const save = async ({ detail }) => {\n    loading = true\n    try {\n      await mutate(client, {\n        mutation: CREATE_COURSE,\n        variables: { ...detail },\n        refetchQueries: [{ query: TERMS_AND_ALL }]\n        // update: (cache, { data: { createCourse } }) => {\n        //   const data = cache.readQuery({ query: TERMS_AND_ALL })\n        //   const index = data.terms.findIndex(t => t.id === createCourse.term.id)\n        //   data.terms[index].courses.push({ ...createCourse, __typename: 'Course' })\n        //   console.log(data.terms[index].courses)\n        //   client.writeQuery({ query: TERMS_AND_ALL, data })\n        // }\n      })\n      // const { terms } = client.readQuery({ query: TERMS_AND_ALL })\n      // const index = terms.findIndex(t => t.id === response.data.createCourse.term.id)\n      // terms[index].courses.push({ ...response.data.createCourse, __typename: 'Course' })\n      // restore(client, TERMS_AND_ALL, { terms })\n      // termsCache.refetch()\n      notifications.add({ text: `Saved new course '${detail.name}'`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({\n        text: 'Could not save new course.',\n        type: 'danger'\n      })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n\n  button {\n    margin: 1rem 0;\n  }\n</style>\n\n<button class=\"button\" on:click={() => { open = true }}>\n  <i class=\"fas fa-plus\"></i>Add a course\n</button>\n<Modal bind:open>\n  <CourseForm on:reset={reset} on:submit={save} {errors} {termId} {loading} />\n</Modal>",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import { auth } from '../../data/auth'\n  import { client } from '../../data/apollo'\n  import { notifications } from '../notifications'\n  import Modal from '../Modal.svelte'\n  import { COURSE, GET_MY_SESSIONS } from '../../data/queries'\n  import { CREATE_SESSION } from '../../data/mutations'\n  import SessionForm from './SessionForm.svelte'\n\n  export let courseId\n  let loading = false\n  let errors = ''\n  let open = false\n\n  const reset = () => {\n    errors = ''\n    open = false\n  }\n\n  const save = async ({ detail }) => {\n    loading = true\n    detail.startsAt = new Date(detail.startsAt).toISOString()\n    detail.endsAt = new Date(detail.endsAt).toISOString()\n    const now = new Date().toJSON()\n    const latest = new Date(new Date().getTime() + 24 * 3.6e+6).toJSON()\n    try {\n      if (detail.startsAt < now || detail.endsAt < now) {\n        throw new Error('New sessions must be in the future.')\n      }\n      if (detail.startsAt > detail.endsAt) {\n        throw new Error('Session ends before it starts.')\n      }\n      await mutate(client, {\n        mutation: CREATE_SESSION,\n        variables: { ...detail, courseId },\n        refetchQueries: [\n          { query: COURSE, variables: { id: courseId } },\n          { query: GET_MY_SESSIONS, variables: { id: $auth.id, now, latest } }\n        ]\n        // update: (cache, { data: { createSession } }) => {\n        //   const data = cache.readQuery({ query: COURSE, variables: { id: courseId } })\n        //   data.course.sessions.push(createSession)\n        //   data.course.sessions.sort((a, b) => a.startsAt.localeCompare(b.startsAt))\n        //   cache.writeQuery({ query: COURSE, data, variables: { id: courseId } })\n        // }\n      })\n      notifications.add({ text: 'Saved new session', type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({\n        text: 'Could not save new session.',\n        type: 'danger'\n      })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n\n  button {\n    margin: 1rem 0;\n  }\n</style>\n\n<button class=\"button is-primary\" on:click={() => { open = true }}><i class=\"fas fa-plus\"></i>Add a new session</button>\n<Modal bind:open>\n  <SessionForm on:reset={reset} on:submit={save} {errors} {loading} />\n</Modal>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import DatePicker from '../DatePicker.svelte'\n  import Error from '../Error.svelte'\n\n  let saveButton\n  let form\n  let startDate\n  let endDate\n  export let errors\n  export let loading\n  export let name = ''\n  export let defaultDate = null\n  const options = {\n    inline: true,\n    mode: 'range',\n    enableTime: false,\n    altInput: true,\n    altFormat: 'M j, Y',\n    dateFormat: 'Y-m-d'\n  }\n\n  const dispatch = createEventDispatcher()\n\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleChange = (selectedDates) => {\n    if (selectedDates.length === 2) {\n      startDate = selectedDates[0].toISOString()\n      endDate = new Date(selectedDates[1].setHours(23, 59, 59, 999)).toISOString()\n    }\n  }\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { name, startDate, endDate })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding-top: 1rem;\n  }\n\n  form {\n    max-width: 308px;\n  }\n</style>\n\n<h1 class=\"title\">{#if defaultDate}Edit{:else}Create{/if} semester</h1>\n\n<form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset >\n  <Error {errors}/>\n  <Input bind:value={name} label=\"Name\" placeholder=\"i.e. 'Autumn 1978'\" required />\n  <label class=\"label\" >\n    Start and end dates\n  </label>\n  <DatePicker bind:value={defaultDate} placeholder=\"Pick two dates below\" className=\"input\" {options} on:change={(event) =>\n    handleChange(...event.detail)} />\n  <div class=\"buttons\">\n    <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save term</button>\n    <input type=\"reset\" class=\"button\" value=\"Cancel\">\n  </div>\n</form>",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { CREATE_QUESTION } from '../../data/mutations'\n  import { SESSION } from '../../data/queries'\n  import { notifications } from '../notifications'\n  import Modal from '../Modal.svelte'\n  import QuestionForm from './QuestionForm.svelte'\n\n  export let sessionId\n  let open = false\n  let errors = ''\n  let loading = false\n\n  const reset = () => {\n    errors = ''\n    open = false\n  }\n\n  const add = async ({ detail }) => {\n    loading = true\n    let order\n    detail.order && (order = ((detail.order - 1)))\n    try {\n      await mutate(client, {\n        mutation: CREATE_QUESTION,\n        variables: { text: detail.text, order, sessionId },\n        refetchQueries: [{ query: SESSION, variables: { id: sessionId } }]\n      })\n      notifications.add({ text: `Saved new question`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({\n        text: 'Could not save new question.',\n        type: 'danger'\n      })\n    } finally {\n      loading = false\n    }\n    loading = false\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n</style>\n\n<button class=\"button is-primary\" on:click={() => { open = true }}><i class=\"fas fa-plus\"></i>Add a question</button>\n\n<Modal bind:open>\n  <QuestionForm on:reset={reset} on:submit={add} {errors} {loading} />\n</Modal>",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import gql from 'graphql-tag'\n  import { client } from '../../data/apollo'\n  import { CREATE_ANSWER } from '../../data/mutations'\n  import { QUESTION } from '../../data/queries'\n  import { QuestionFields } from '../../data/fragments'\n  import { notifications } from '../notifications'\n  import Error from '../Error.svelte'\n  import Input from '../Input.svelte'\n\n  export let questionId\n  let show = false\n  let errors = ''\n  let loading = false\n  let text = ''\n\n  const reset = () => {\n    errors = ''\n    show = false\n  }\n\n  const add = async () => {\n    loading = true\n    try {\n      await mutate(client, {\n        mutation: CREATE_ANSWER,\n        variables: { text, questionId },\n        refetchQueries: [{ query: QUESTION, variables: { id: questionId } }]\n      })\n      notifications.add({ text: `Saved new answer`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({\n        text: 'Could not save new question.',\n        type: 'danger'\n      })\n    } finally {\n      loading = false\n    }\n    loading = false\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n</style>\n\n{#if !show}\n  <button class=\"button is-primary\" on:click={() => { show = true }}>\n    <i class=\"fas fa-plus\"></i>Add an answer\n  </button>\n{:else}\n  <Error {errors} />\n  <Input label=\"Text\" type=\"text\" bind:value={text} required />\n  <button class=\"button is-primary\" class:is-loading={loading} on:click={add}>Save answer</button>\n{/if}",
    "<script>\n  import { auth } from '../../data/auth'\n\n  export let courses = []\n\n  $: teaching = courses && courses.filter(c => c.teachers.find(t => t.id === $auth.id))\n  $: notTeaching = courses.filter(c => !c.teachers.find(t => t.id === $auth.id))\n  $: attending = courses.filter(c => c.students.find(s => s.id === $auth.id))\n  $: notAttending = courses.filter(c => !c.students.find(s => s.id === $auth.id))\n</script>\n\n<style>\n  h2.title {\n    margin: 2rem 0 1rem;\n  }\n</style>\n{#if courses.length > 0}\n\n  {#if teaching && teaching.length}\n    <h2 class=\"title is-5\">Teaching</h2>\n    {#each teaching as course (course.id)}\n      <li><a href=\"#/course/{course.id}\">{course.name}</a></li>\n    {/each}\n  {/if}\n\n  {#if attending && attending.length}\n    <h2 class=\"title is-5\">Attending</h2>\n    {#each attending as course (course.id)}\n      <li><a href=\"#/course/{course.id}\">{course.name}</a></li>\n    {/each}\n  {/if}\n\n  {#if $auth.role === 'Teacher' && notTeaching.length > 0}\n    <h2 class=\"title is-5\">Not teaching</h2>\n    {#each notTeaching as course (course.id)}\n      <li><a href=\"#/course/{course.id}\">{course.name}</a></li>\n    {/each}\n  {/if}\n\n  {#if $auth.role === 'Student' && notAttending.length > 0}\n    <h2 class=\"title is-5\">Not attending</h2>\n    {#each notAttending as course (course.id)}\n      <li><a href=\"#/course/{course.id}\">{course.name}</a></li>\n    {/each}\n  {/if}\n\n{/if}",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { DELETE_QUESTION } from '../../data/mutations'\n  import { SESSION } from '../../data/queries'\n  import { notifications } from '../notifications'\n  import { push } from 'svelte-spa-router'\n\n  export let id\n  export let next = null\n  export let sessionId\n\n  const remove = async () => {\n    try {\n      await mutate(client, {\n        mutation: DELETE_QUESTION,\n        variables: { id },\n        refetchQueries: [{ query: SESSION, variables: { id: sessionId } }]\n      })\n      notifications.add({ text: `Deleted question`, type: 'success' })\n      push(next || `/session/${sessionId}`)\n    } catch (error) {\n      notifications.add({\n        text: 'Could not delete question.',\n        type: 'danger'\n      })\n    }\n  }\n</script>\n\n<style>\n  button i {\n    margin-right: 0.5rem;\n  }\n</style>\n\n<button class=\"button\" on:click={remove}>\n  <i class=\"fas fa-trash\"></i>\n  Delete Question\n</button>",
    "<!-- Most of this is adapted from svelte-flatpickr, modified to work with svelte3 -->\n<script>\n  import flatpickr from 'flatpickr'\n  import { onMount, onDestroy, createEventDispatcher } from 'svelte'\n  import 'flatpickr/dist/flatpickr.css'\n  import '../../public/calendar-theme.css'\n\n  const dispatch = createEventDispatcher()\n\n  let dateInput\n  let fp\n  export let value\n  export let placeholder = ''\n  export let className = ''\n  export let options = {}\n\n  const hooks = new Set([\n    'onChange',\n    'onOpen',\n    'onClose',\n    'onMonthChange',\n    'onYearChange',\n    'onReady',\n    'onValueUpdate',\n    'onDayCreate'\n  ])\n\n  onMount(() => {\n    fp = flatpickr(dateInput, addHooks(options))\n  })\n\n  $: if (fp && value) {\n    fp.setDate(value)\n  }\n\n  onDestroy(() => { if (fp && 'destroy' in fp) fp.destroy() })\n\n  const addHooks = (options) => {\n    options = Object.assign({}, options)\n    for (const hook of hooks) {\n      const dispatcher = (selectedDates, dateString, instance) => {\n        dispatch(stripOn(hook), [selectedDates, dateString, instance])\n      }\n      if (hook in options) {\n        // Hooks must be arrays\n        if (!Array.isArray(options[hook])) {\n          options[hook] = [options[hook]]\n        }\n        options[hook].push(dispatcher)\n      } else {\n        options[hook] = [dispatcher]\n      }\n    }\n    if (options.onChange && !options.onChange.includes(updateValue)) {\n      options.onChange.push(updateValue)\n    }\n    return options\n  }\n  const updateValue = (newValue) => {\n    if (Array.isArray(newValue) && newValue.length === 1) {\n      newValue = newValue[0]\n    }\n    value = newValue\n  }\n  const stripOn = (hook) => {\n    return hook.charAt(2).toLowerCase() + hook.substring(3)\n  }\n</script>\n\n<style>\n  input {\n    width: 308px;\n  }\n</style>\n\n<input bind:this={dateInput} bind:value type=\"date\" class={className} placeholder={placeholder} />",
    "<script>\n  import { mutate } from 'svelte-apollo'\n  import { ANSWER_QUESTION } from '../../data/mutations'\n  import { client } from '../../data/apollo'\n  import { auth } from '../../data/auth'\n  import Loading from '../Loading.svelte'\n  import Error from '../Error.svelte'\n\n  export let question\n  let answered = ''\n  let loading = false\n  let errors = ''\n\n  const respond = async (answer) => {\n    loading = true\n    try {\n      await mutate(client, {\n        mutation: ANSWER_QUESTION,\n        variables: {\n          questionId: question.id,\n          answerId: answer.id,\n          studentId: $auth.id,\n          sessionId: question.session.id\n        }\n      })\n      answered = answer.text\n    } catch (error) {\n      errors = error\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  section.question {\n    width: 100%;\n    margin-top: 1rem;\n    padding: 1rem;\n  }\n\n  button {\n    margin: 0.5rem;\n  }\n\n  li {\n    list-style: none;\n  }\n</style>\n\n<section class=\"question\">\n  <h2 class=\"title\"> {question.text}</h2>\n\n  <Error {errors} />\n  {#if loading}\n    <Loading what=\"response\" />\n  {:else if answered}\n    <p>You Answered: {answered}</p>\n  {:else}\n    <ul>\n      {#each question.answers as answer (answer.id)}\n        <li>\n          <button class=\"button is-primary\" on:click={() => { respond(answer) }}>{answer.text}</button>\n        </li>\n      {/each}\n    </ul>\n  {/if}\n</section>",
    "<script>\n  import TeacherQuestionCard from './TeacherQuestionCard.svelte'\n  export let questions\n</script>\n\n<style>\n  .question-list {\n    margin-top: 1rem;\n  }\n</style>\n\n<section class=\"question-list\">\n  <h2 class=\"title is-4\">Questions</h2>\n  <p>Click a question to expand.</p>\n  {#if questions && questions.length}\n    {#each questions as question (question.id)}\n      <TeacherQuestionCard {question} />\n    {/each}\n  {/if}\n</section>",
    "<script>\n  import { format } from 'date-fns'\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import Error from '../Error.svelte'\n\n  let saveButton\n  let form\n  export let session = {}\n  export let startsAt = ''\n  export let endsAt = ''\n  export let errors\n  export let loading\n\n  const dispatch = createEventDispatcher()\n\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { startsAt, endsAt })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding-top: 1rem;\n  }\n\n  form {\n    max-width: 308px;\n  }\n</style>\n\n<h1 class=\"title\">{#if session.id}Edit{:else}Create{/if} Session</h1>\n  \n  <form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset >\n    <Error {errors}/>\n    <Input label=\"Start time\" type=\"datetime-local\" bind:value={startsAt} required min={format(new Date(), \"yyyy-MM-dd'T'HH:mm\")} />\n    <Input label=\"End time\" type=\"datetime-local\" bind:value={endsAt} required min={format(new Date(), \"yyyy-MM-dd'T'HH:mm\")} />\n    <div class=\"buttons\">\n      <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save session</button>\n      <input type=\"reset\" class=\"button\" value=\"Cancel\">\n    </div>\n  </form>",
    "<script>\n  import { notifications } from '../notifications'\n  import { formatRelative } from 'date-fns'\n  import { mutate } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { currentQuestion } from './stores'\n  import { ASK_QUESTION } from '../../data/mutations'\n  import TeacherAnswers from './TeacherAnswers.svelte'\n\n  export let question\n  let asked = false\n  let loading = false\n\n  $: isCurrent = $currentQuestion && $currentQuestion.id === question.id\n\n  const select = () => {\n    currentQuestion.set(question)\n  }\n  const send = async () => {\n    loading = true\n    try {\n      mutate(client, {\n        mutation: ASK_QUESTION,\n        variables: { id: question.id }\n      })\n      asked = true\n      notifications.add({ text: 'Successfully sent question', type: 'success' })\n    } catch (error) {\n      console.error(error)\n      notifications.add({ text: 'Could not send question', type: 'danger' })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  li {\n    list-style: none;\n    padding: 0.5rem;\n    cursor: pointer;\n  }\n\n  li:hover {\n    background: black;\n    border: 1px solid grey;\n  }\n\n  li.current {\n    border: 1px solid grey;\n    background: black;\n    cursor: inherit;\n  }\n\n  li.current .question {\n    font-size: 1.6rem;\n  }\n\n  button i {\n    margin-right: 0.5rem;\n  }\n\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n</style>\n\n<li class:current={isCurrent}>\n\n  <div class=\"question\" on:click={select}>\n    {question.order + 1}. {question.text}\n    {#if !isCurrent}\n      <span class=\"is-pulled-right\"><i class=\"fas fa-check\"></i></span>\n    {/if}\n  </div>\n\n  {#if isCurrent}\n    <TeacherAnswers {question} />\n    <div class=\"buttons\">\n      {#if question.asked}\n        <span>Asked {formatRelative(new Date(question.asked), new Date())}</span>\n      {/if}\n      <button class:is-loading={loading} class=\"button is-primary\" on:click={send}>\n        <i class=\"fas fa-paper-plane\"></i>\n        {asked || question.asked ? 'Send again' : 'Send'}\n      </button>\n    </div>\n  {/if}\n\n</li>",
    "<script>\n  import { query } from 'svelte-apollo'\n  import { client } from '../../data/apollo'\n  import { TERMS } from '../../data/queries'\n\n  export let termId = ''\n  let termSelect\n\n  const terms = query(client, { query: TERMS })\n\n  const handleChange = () => {\n    termId = termSelect.value\n  }\n</script>\n\n<style>\n  .select {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<div class=\"select\">\n\n  <select bind:value={termId} on:change={handleChange} bind:this={termSelect}>\n    {#await $terms}\n      <option>Loading...</option>\n    {:then result}\n      {#if !termId}\n      <option>-- Select a term --</option>\n      {/if}\n      {#each result.data.terms as term (term.id)}\n      <option value={term.id} selected={term.id === termId}>{term.name}</option>\n      {/each}\n    {:catch}\n      <option />\n    {/await}\n  </select>\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n  import { client } from '../../data/apollo'\n  import { RESPONSES, RESPONSE_SUBSCRIPTION } from '../../data/queries'\n  import TeacherAnswerRow from './TeacherAnswerRow.svelte'\n\n  export let question\n  let responses = []\n\n  onMount(async () => {\n    const responsesResult = await client.query({\n      query: RESPONSES,\n      variables: { questionId: question.id }\n    })\n    responses = responsesResult.data.responses\n    client.subscribe({\n      query: RESPONSE_SUBSCRIPTION,\n      variables: { questionId: question.id }\n    }).subscribe({\n      next (result) {\n        responses = [...responses, result.data.responses]\n      }\n    })\n  })\n</script>\n\n<style>\n  .answers {\n    padding: 1rem;\n  }\n\n  .answers p {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<div class=\"answers\">\n  <p>{responses.length} responses total:</p>\n  {#each question.answers as answer (answer.id)}\n      <TeacherAnswerRow \n      {answer} \n      responses={responses.filter(r => r.answer.id === answer.id)}\n      totalResponses={responses.length}\n      />\n    {/each}\n</div>"
  ],
  "names": [],
  "mappings": "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"
}