# import * from './generated/graphql/prisma.graphql'
scalar DateTime

type Query {
  me: User
  user(id: ID!): User
  users(orderBy: UserOrderByInput, where: UserWhereInput): [User!]!
  course(id: ID!): Course
  courses(orderBy: CourseOrderByInput, where: CourseWhereInput): [Course!]!
  term(id: ID!): Term
  terms(orderBy: TermOrderByInput, where: TermWhereInput): [Term!]!
  session(id: ID!): Session
  sessions(orderBy: SessionOrderByInput, where: SessionWhereInput): [Session!]!
  question(id: ID!): Question
  questions(
    orderBy: QuestionOrderByInput
    where: QuestionWhereInput,
    first: Int,
    last: Int
  ): [Question!]!
  answer(id: ID!): Answer
  answers(orderBy: AnswerOrderByInput, where: AnswerWhereInput): [Answer!]!
  response(id: ID!): Response
  responses(
    orderBy: ResponseOrderByInput
    where: ResponseWhereInput
  ): [Response!]!
  calls(orderBy: CallOrderByInput, where: CallWhereInput): [Call!]!
  absences(orderBy: AbsenceOrderByInput, where: AbsenceWhereInput): [Absence!]!
  duplicateQuestions: [QuestionDuplicatePayload!]!
}

type Mutation {
  signup(username: String!, name: String!, password: String!): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  changePassword(oldPassword: String!, newPassword: String!): User
  resetPassword(username: String!): String
  updateUser(id: ID!, input: UserUpdateInput!): User
  createTerm(startDate: DateTime!, endDate: DateTime!, name: String!): Term
  updateTerm(
    startDate: DateTime!
    endDate: DateTime!
    name: String!
    id: ID!
  ): Term
  deleteTerm(id: ID!): Term
  createCourse(name: String!, termId: ID, code: String!): Course
  deleteCourse(id: ID!): Course
  addStudentToCourse(id: ID!, code: String!): Course
  addTeacherToCourse(id: ID!, courseId: ID!): Course
  removeTeacherFromCourse(id: ID!, courseId: ID!): Course
  createSession(startsAt: DateTime!, endsAt: DateTime!, courseId: ID!): Session
  importQuestions(fromSessionId: ID!, toSessionId: ID!): Session
  createQuestion(input: QuestionCreateInput!): Question
  updateQuestion(id: ID!, input: QuestionUpdateInput!): Question
  askQuestion(id: ID!): Question
  deleteQuestion(id: ID!): Question
  createAnswer(text: String!, questionId: ID!): Answer
  deleteAnswer(id: ID!): Answer
  answerQuestion(
    studentId: ID!
    questionId: ID!
    answerId: ID!
    sessionId: ID!
  ): Response
  deleteResponse(id: ID!): Response
  callStudent(sessionId: ID!): Call
  evaluateStudent(callId: ID!, evaluation: Evaluation): Call
  markStudentAbsent(studentId: ID!, sessionId: ID!): Absence
  unmarkStudentAbsent(studentId: ID!, sessionId: ID!): Absence
}

type Subscription {
  questions(sessionId: ID!): Question
  responses(sessionId: ID, questionId: ID): Response
  calls(sessionId: ID!): Call
  absences(sessionId: ID!): AbsenceSubscriptionPayload
}

type AuthPayload {
  token: String!
  user: User!
}

type Session {
  id: ID!
  startsAt: DateTime!
  endsAt: DateTime!
  course: Course!
  questions: [Question!]!
  order: Int
  calls: [Call!]!
  absences: [Absence!]!
}

type User {
id: ID!
username: String!
name: String!
coursesAttending: [Course!]
coursesTeaching: [Course!]
role: Role!
calls: [Call!]!
pinyinName: String
absences: [Absence!]!
}

type QuestionDuplicatePayload {
  text: String!
  count: Int!
}