# import * from './generated/graphql/prisma.graphql'
scalar DateTime

type Query {
  me: User
  user(id: ID!): User
  users: [User!]!
  course(id: ID!): Course
  courses(orderBy: CourseOrderByInput, where: CourseWhereInput): [Course!]!
  term(id: ID!): Term
  terms(orderBy: TermOrderByInput, where: TermWhereInput): [Term!]!
  session(id: ID!): Session
  sessions(orderBy: SessionOrderByInput, where: SessionWhereInput): [Session!]!
  prompt(id: ID!): Prompt
  prompts: [Prompt!]!
  answer(id: ID!): Answer
  answers: [Answer!]!
  response(id: ID!): Response
  responses: [Response!]!
}

type Mutation {
  signup(username: String!, name: String!, password: String!): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  createTerm(startDate: DateTime!, endDate: DateTime!, name: String!): Term
  updateTerm(
    startDate: DateTime!
    endDate: DateTime!
    name: String!
    id: ID!
  ): Term
  deleteTerm(id: ID!): Term
  createCourse(name: String!, termId: ID, code: String!): Course
  deleteCourse(id: ID!): Course
  addStudentToCourse(id: ID!, code: String!): Course
  addTeacherToCourse(id: ID!, courseId: ID!): Course
  removeTeacherFromCourse(id: ID!, courseId: ID!): Course
  createSession(startsAt: DateTime!, endsAt: DateTime!, courseId: ID!): Session
  createPrompt(text: String!, order: Int, sessionId: ID!): Prompt
  updatePrompt(text: String!, order: Int): Prompt
  deletePrompt(id: ID!): Prompt
}

type AuthPayload {
  token: String!
  user: User!
}

type Session {
  id: ID!
  startsAt: DateTime!
  endsAt: DateTime!
  course: Course!
  prompts: [Prompt!]!
  order: Int
}
