// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  response: (where?: ResponseWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
  term: (where?: TermWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  response: (where: ResponseWhereUniqueInput) => ResponseNullablePromise;
  responses: (args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Response>;
  responsesConnection: (args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResponseConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionNullablePromise;
  sessions: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Session>;
  sessionsConnection: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SessionConnectionPromise;
  term: (where: TermWhereUniqueInput) => TermNullablePromise;
  terms: (args?: {
    where?: TermWhereInput;
    orderBy?: TermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Term>;
  termsConnection: (args?: {
    where?: TermWhereInput;
    orderBy?: TermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TermConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createResponse: (data: ResponseCreateInput) => ResponsePromise;
  updateResponse: (args: {
    data: ResponseUpdateInput;
    where: ResponseWhereUniqueInput;
  }) => ResponsePromise;
  upsertResponse: (args: {
    where: ResponseWhereUniqueInput;
    create: ResponseCreateInput;
    update: ResponseUpdateInput;
  }) => ResponsePromise;
  deleteResponse: (where: ResponseWhereUniqueInput) => ResponsePromise;
  deleteManyResponses: (where?: ResponseWhereInput) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (args: {
    data: SessionUpdateInput;
    where: SessionWhereUniqueInput;
  }) => SessionPromise;
  updateManySessions: (args: {
    data: SessionUpdateManyMutationInput;
    where?: SessionWhereInput;
  }) => BatchPayloadPromise;
  upsertSession: (args: {
    where: SessionWhereUniqueInput;
    create: SessionCreateInput;
    update: SessionUpdateInput;
  }) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;
  createTerm: (data: TermCreateInput) => TermPromise;
  updateTerm: (args: {
    data: TermUpdateInput;
    where: TermWhereUniqueInput;
  }) => TermPromise;
  updateManyTerms: (args: {
    data: TermUpdateManyMutationInput;
    where?: TermWhereInput;
  }) => BatchPayloadPromise;
  upsertTerm: (args: {
    where: TermWhereUniqueInput;
    create: TermCreateInput;
    update: TermUpdateInput;
  }) => TermPromise;
  deleteTerm: (where: TermWhereUniqueInput) => TermPromise;
  deleteManyTerms: (where?: TermWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  response: (
    where?: ResponseSubscriptionWhereInput
  ) => ResponseSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  term: (
    where?: TermSubscriptionWhereInput
  ) => TermSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "Student" | "Teacher";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC";

export type ResponseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "code_ASC"
  | "code_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startsAt_ASC"
  | "startsAt_DESC"
  | "endsAt_ASC"
  | "endsAt_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "order_ASC"
  | "order_DESC";

export type TermOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  question?: Maybe<QuestionWhereInput>;
  responses_every?: Maybe<ResponseWhereInput>;
  responses_some?: Maybe<ResponseWhereInput>;
  responses_none?: Maybe<ResponseWhereInput>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  responses_every?: Maybe<ResponseWhereInput>;
  responses_some?: Maybe<ResponseWhereInput>;
  responses_none?: Maybe<ResponseWhereInput>;
  session?: Maybe<SessionWhereInput>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface ResponseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  student?: Maybe<UserWhereInput>;
  question?: Maybe<QuestionWhereInput>;
  answer?: Maybe<AnswerWhereInput>;
  session?: Maybe<SessionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResponseWhereInput[] | ResponseWhereInput>;
  OR?: Maybe<ResponseWhereInput[] | ResponseWhereInput>;
  NOT?: Maybe<ResponseWhereInput[] | ResponseWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  coursesAttending_every?: Maybe<CourseWhereInput>;
  coursesAttending_some?: Maybe<CourseWhereInput>;
  coursesAttending_none?: Maybe<CourseWhereInput>;
  coursesTeaching_every?: Maybe<CourseWhereInput>;
  coursesTeaching_some?: Maybe<CourseWhereInput>;
  coursesTeaching_none?: Maybe<CourseWhereInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  students_every?: Maybe<UserWhereInput>;
  students_some?: Maybe<UserWhereInput>;
  students_none?: Maybe<UserWhereInput>;
  teachers_every?: Maybe<UserWhereInput>;
  teachers_some?: Maybe<UserWhereInput>;
  teachers_none?: Maybe<UserWhereInput>;
  term?: Maybe<TermWhereInput>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  sessions_every?: Maybe<SessionWhereInput>;
  sessions_some?: Maybe<SessionWhereInput>;
  sessions_none?: Maybe<SessionWhereInput>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface TermWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  courses_every?: Maybe<CourseWhereInput>;
  courses_some?: Maybe<CourseWhereInput>;
  courses_none?: Maybe<CourseWhereInput>;
  AND?: Maybe<TermWhereInput[] | TermWhereInput>;
  OR?: Maybe<TermWhereInput[] | TermWhereInput>;
  NOT?: Maybe<TermWhereInput[] | TermWhereInput>;
}

export interface SessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startsAt?: Maybe<DateTimeInput>;
  startsAt_not?: Maybe<DateTimeInput>;
  startsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_lt?: Maybe<DateTimeInput>;
  startsAt_lte?: Maybe<DateTimeInput>;
  startsAt_gt?: Maybe<DateTimeInput>;
  startsAt_gte?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endsAt_not?: Maybe<DateTimeInput>;
  endsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_lt?: Maybe<DateTimeInput>;
  endsAt_lte?: Maybe<DateTimeInput>;
  endsAt_gt?: Maybe<DateTimeInput>;
  endsAt_gte?: Maybe<DateTimeInput>;
  course?: Maybe<CourseWhereInput>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  AND?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  OR?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  NOT?: Maybe<SessionWhereInput[] | SessionWhereInput>;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ResponseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TermWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  question: QuestionCreateOneWithoutAnswersInput;
  responses?: Maybe<ResponseCreateManyWithoutAnswerInput>;
}

export interface QuestionCreateOneWithoutAnswersInput {
  create?: Maybe<QuestionCreateWithoutAnswersInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutAnswersInput {
  id?: Maybe<ID_Input>;
  text: String;
  order: Int;
  responses?: Maybe<ResponseCreateManyWithoutQuestionInput>;
  session: SessionCreateOneWithoutQuestionsInput;
}

export interface ResponseCreateManyWithoutQuestionInput {
  create?: Maybe<
    ResponseCreateWithoutQuestionInput[] | ResponseCreateWithoutQuestionInput
  >;
  connect?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
}

export interface ResponseCreateWithoutQuestionInput {
  id?: Maybe<ID_Input>;
  student: UserCreateOneInput;
  answer: AnswerCreateOneWithoutResponsesInput;
  session: SessionCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  name: String;
  password: String;
  coursesAttending?: Maybe<CourseCreateManyWithoutStudentsInput>;
  coursesTeaching?: Maybe<CourseCreateManyWithoutTeachersInput>;
  role?: Maybe<Role>;
}

export interface CourseCreateManyWithoutStudentsInput {
  create?: Maybe<
    CourseCreateWithoutStudentsInput[] | CourseCreateWithoutStudentsInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  teachers?: Maybe<UserCreateManyWithoutCoursesTeachingInput>;
  term: TermCreateOneWithoutCoursesInput;
  code: String;
  sessions?: Maybe<SessionCreateManyWithoutCourseInput>;
}

export interface UserCreateManyWithoutCoursesTeachingInput {
  create?: Maybe<
    | UserCreateWithoutCoursesTeachingInput[]
    | UserCreateWithoutCoursesTeachingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutCoursesTeachingInput {
  id?: Maybe<ID_Input>;
  username: String;
  name: String;
  password: String;
  coursesAttending?: Maybe<CourseCreateManyWithoutStudentsInput>;
  role?: Maybe<Role>;
}

export interface TermCreateOneWithoutCoursesInput {
  create?: Maybe<TermCreateWithoutCoursesInput>;
  connect?: Maybe<TermWhereUniqueInput>;
}

export interface TermCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  name: String;
}

export interface SessionCreateManyWithoutCourseInput {
  create?: Maybe<
    SessionCreateWithoutCourseInput[] | SessionCreateWithoutCourseInput
  >;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
}

export interface SessionCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  questions?: Maybe<QuestionCreateManyWithoutSessionInput>;
}

export interface QuestionCreateManyWithoutSessionInput {
  create?: Maybe<
    QuestionCreateWithoutSessionInput[] | QuestionCreateWithoutSessionInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutSessionInput {
  id?: Maybe<ID_Input>;
  text: String;
  order: Int;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  responses?: Maybe<ResponseCreateManyWithoutQuestionInput>;
}

export interface AnswerCreateManyWithoutQuestionInput {
  create?: Maybe<
    AnswerCreateWithoutQuestionInput[] | AnswerCreateWithoutQuestionInput
  >;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutQuestionInput {
  id?: Maybe<ID_Input>;
  text: String;
  responses?: Maybe<ResponseCreateManyWithoutAnswerInput>;
}

export interface ResponseCreateManyWithoutAnswerInput {
  create?: Maybe<
    ResponseCreateWithoutAnswerInput[] | ResponseCreateWithoutAnswerInput
  >;
  connect?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
}

export interface ResponseCreateWithoutAnswerInput {
  id?: Maybe<ID_Input>;
  student: UserCreateOneInput;
  question: QuestionCreateOneWithoutResponsesInput;
  session: SessionCreateOneInput;
}

export interface QuestionCreateOneWithoutResponsesInput {
  create?: Maybe<QuestionCreateWithoutResponsesInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutResponsesInput {
  id?: Maybe<ID_Input>;
  text: String;
  order: Int;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  session: SessionCreateOneWithoutQuestionsInput;
}

export interface SessionCreateOneWithoutQuestionsInput {
  create?: Maybe<SessionCreateWithoutQuestionsInput>;
  connect?: Maybe<SessionWhereUniqueInput>;
}

export interface SessionCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  course: CourseCreateOneWithoutSessionsInput;
}

export interface CourseCreateOneWithoutSessionsInput {
  create?: Maybe<CourseCreateWithoutSessionsInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutSessionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<UserCreateManyWithoutCoursesAttendingInput>;
  teachers?: Maybe<UserCreateManyWithoutCoursesTeachingInput>;
  term: TermCreateOneWithoutCoursesInput;
  code: String;
}

export interface UserCreateManyWithoutCoursesAttendingInput {
  create?: Maybe<
    | UserCreateWithoutCoursesAttendingInput[]
    | UserCreateWithoutCoursesAttendingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutCoursesAttendingInput {
  id?: Maybe<ID_Input>;
  username: String;
  name: String;
  password: String;
  coursesTeaching?: Maybe<CourseCreateManyWithoutTeachersInput>;
  role?: Maybe<Role>;
}

export interface CourseCreateManyWithoutTeachersInput {
  create?: Maybe<
    CourseCreateWithoutTeachersInput[] | CourseCreateWithoutTeachersInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutTeachersInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<UserCreateManyWithoutCoursesAttendingInput>;
  term: TermCreateOneWithoutCoursesInput;
  code: String;
  sessions?: Maybe<SessionCreateManyWithoutCourseInput>;
}

export interface SessionCreateOneInput {
  create?: Maybe<SessionCreateInput>;
  connect?: Maybe<SessionWhereUniqueInput>;
}

export interface SessionCreateInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  course: CourseCreateOneWithoutSessionsInput;
  questions?: Maybe<QuestionCreateManyWithoutSessionInput>;
}

export interface AnswerCreateOneWithoutResponsesInput {
  create?: Maybe<AnswerCreateWithoutResponsesInput>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutResponsesInput {
  id?: Maybe<ID_Input>;
  text: String;
  question: QuestionCreateOneWithoutAnswersInput;
}

export interface AnswerUpdateInput {
  text?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutAnswersInput>;
  responses?: Maybe<ResponseUpdateManyWithoutAnswerInput>;
}

export interface QuestionUpdateOneRequiredWithoutAnswersInput {
  create?: Maybe<QuestionCreateWithoutAnswersInput>;
  update?: Maybe<QuestionUpdateWithoutAnswersDataInput>;
  upsert?: Maybe<QuestionUpsertWithoutAnswersInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateWithoutAnswersDataInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
  responses?: Maybe<ResponseUpdateManyWithoutQuestionInput>;
  session?: Maybe<SessionUpdateOneRequiredWithoutQuestionsInput>;
}

export interface ResponseUpdateManyWithoutQuestionInput {
  create?: Maybe<
    ResponseCreateWithoutQuestionInput[] | ResponseCreateWithoutQuestionInput
  >;
  delete?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  connect?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  set?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  disconnect?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  update?: Maybe<
    | ResponseUpdateWithWhereUniqueWithoutQuestionInput[]
    | ResponseUpdateWithWhereUniqueWithoutQuestionInput
  >;
  upsert?: Maybe<
    | ResponseUpsertWithWhereUniqueWithoutQuestionInput[]
    | ResponseUpsertWithWhereUniqueWithoutQuestionInput
  >;
  deleteMany?: Maybe<ResponseScalarWhereInput[] | ResponseScalarWhereInput>;
}

export interface ResponseUpdateWithWhereUniqueWithoutQuestionInput {
  where: ResponseWhereUniqueInput;
  data: ResponseUpdateWithoutQuestionDataInput;
}

export interface ResponseUpdateWithoutQuestionDataInput {
  student?: Maybe<UserUpdateOneRequiredInput>;
  answer?: Maybe<AnswerUpdateOneRequiredWithoutResponsesInput>;
  session?: Maybe<SessionUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  coursesAttending?: Maybe<CourseUpdateManyWithoutStudentsInput>;
  coursesTeaching?: Maybe<CourseUpdateManyWithoutTeachersInput>;
  role?: Maybe<Role>;
}

export interface CourseUpdateManyWithoutStudentsInput {
  create?: Maybe<
    CourseCreateWithoutStudentsInput[] | CourseCreateWithoutStudentsInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutStudentsInput[]
    | CourseUpdateWithWhereUniqueWithoutStudentsInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutStudentsInput[]
    | CourseUpsertWithWhereUniqueWithoutStudentsInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutStudentsDataInput;
}

export interface CourseUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  teachers?: Maybe<UserUpdateManyWithoutCoursesTeachingInput>;
  term?: Maybe<TermUpdateOneRequiredWithoutCoursesInput>;
  code?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutCourseInput>;
}

export interface UserUpdateManyWithoutCoursesTeachingInput {
  create?: Maybe<
    | UserCreateWithoutCoursesTeachingInput[]
    | UserCreateWithoutCoursesTeachingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutCoursesTeachingInput[]
    | UserUpdateWithWhereUniqueWithoutCoursesTeachingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutCoursesTeachingInput[]
    | UserUpsertWithWhereUniqueWithoutCoursesTeachingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutCoursesTeachingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCoursesTeachingDataInput;
}

export interface UserUpdateWithoutCoursesTeachingDataInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  coursesAttending?: Maybe<CourseUpdateManyWithoutStudentsInput>;
  role?: Maybe<Role>;
}

export interface UserUpsertWithWhereUniqueWithoutCoursesTeachingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCoursesTeachingDataInput;
  create: UserCreateWithoutCoursesTeachingInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface TermUpdateOneRequiredWithoutCoursesInput {
  create?: Maybe<TermCreateWithoutCoursesInput>;
  update?: Maybe<TermUpdateWithoutCoursesDataInput>;
  upsert?: Maybe<TermUpsertWithoutCoursesInput>;
  connect?: Maybe<TermWhereUniqueInput>;
}

export interface TermUpdateWithoutCoursesDataInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
}

export interface TermUpsertWithoutCoursesInput {
  update: TermUpdateWithoutCoursesDataInput;
  create: TermCreateWithoutCoursesInput;
}

export interface SessionUpdateManyWithoutCourseInput {
  create?: Maybe<
    SessionCreateWithoutCourseInput[] | SessionCreateWithoutCourseInput
  >;
  delete?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  set?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  disconnect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  update?: Maybe<
    | SessionUpdateWithWhereUniqueWithoutCourseInput[]
    | SessionUpdateWithWhereUniqueWithoutCourseInput
  >;
  upsert?: Maybe<
    | SessionUpsertWithWhereUniqueWithoutCourseInput[]
    | SessionUpsertWithWhereUniqueWithoutCourseInput
  >;
  deleteMany?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  updateMany?: Maybe<
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput
  >;
}

export interface SessionUpdateWithWhereUniqueWithoutCourseInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutCourseDataInput;
}

export interface SessionUpdateWithoutCourseDataInput {
  startsAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  questions?: Maybe<QuestionUpdateManyWithoutSessionInput>;
}

export interface QuestionUpdateManyWithoutSessionInput {
  create?: Maybe<
    QuestionCreateWithoutSessionInput[] | QuestionCreateWithoutSessionInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutSessionInput[]
    | QuestionUpdateWithWhereUniqueWithoutSessionInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutSessionInput[]
    | QuestionUpsertWithWhereUniqueWithoutSessionInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutSessionInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutSessionDataInput;
}

export interface QuestionUpdateWithoutSessionDataInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  responses?: Maybe<ResponseUpdateManyWithoutQuestionInput>;
}

export interface AnswerUpdateManyWithoutQuestionInput {
  create?: Maybe<
    AnswerCreateWithoutQuestionInput[] | AnswerCreateWithoutQuestionInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput
  >;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  updateMany?: Maybe<
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutQuestionDataInput;
}

export interface AnswerUpdateWithoutQuestionDataInput {
  text?: Maybe<String>;
  responses?: Maybe<ResponseUpdateManyWithoutAnswerInput>;
}

export interface ResponseUpdateManyWithoutAnswerInput {
  create?: Maybe<
    ResponseCreateWithoutAnswerInput[] | ResponseCreateWithoutAnswerInput
  >;
  delete?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  connect?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  set?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  disconnect?: Maybe<ResponseWhereUniqueInput[] | ResponseWhereUniqueInput>;
  update?: Maybe<
    | ResponseUpdateWithWhereUniqueWithoutAnswerInput[]
    | ResponseUpdateWithWhereUniqueWithoutAnswerInput
  >;
  upsert?: Maybe<
    | ResponseUpsertWithWhereUniqueWithoutAnswerInput[]
    | ResponseUpsertWithWhereUniqueWithoutAnswerInput
  >;
  deleteMany?: Maybe<ResponseScalarWhereInput[] | ResponseScalarWhereInput>;
}

export interface ResponseUpdateWithWhereUniqueWithoutAnswerInput {
  where: ResponseWhereUniqueInput;
  data: ResponseUpdateWithoutAnswerDataInput;
}

export interface ResponseUpdateWithoutAnswerDataInput {
  student?: Maybe<UserUpdateOneRequiredInput>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutResponsesInput>;
  session?: Maybe<SessionUpdateOneRequiredInput>;
}

export interface QuestionUpdateOneRequiredWithoutResponsesInput {
  create?: Maybe<QuestionCreateWithoutResponsesInput>;
  update?: Maybe<QuestionUpdateWithoutResponsesDataInput>;
  upsert?: Maybe<QuestionUpsertWithoutResponsesInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateWithoutResponsesDataInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  session?: Maybe<SessionUpdateOneRequiredWithoutQuestionsInput>;
}

export interface SessionUpdateOneRequiredWithoutQuestionsInput {
  create?: Maybe<SessionCreateWithoutQuestionsInput>;
  update?: Maybe<SessionUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<SessionUpsertWithoutQuestionsInput>;
  connect?: Maybe<SessionWhereUniqueInput>;
}

export interface SessionUpdateWithoutQuestionsDataInput {
  startsAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutSessionsInput>;
}

export interface CourseUpdateOneRequiredWithoutSessionsInput {
  create?: Maybe<CourseCreateWithoutSessionsInput>;
  update?: Maybe<CourseUpdateWithoutSessionsDataInput>;
  upsert?: Maybe<CourseUpsertWithoutSessionsInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutSessionsDataInput {
  name?: Maybe<String>;
  students?: Maybe<UserUpdateManyWithoutCoursesAttendingInput>;
  teachers?: Maybe<UserUpdateManyWithoutCoursesTeachingInput>;
  term?: Maybe<TermUpdateOneRequiredWithoutCoursesInput>;
  code?: Maybe<String>;
}

export interface UserUpdateManyWithoutCoursesAttendingInput {
  create?: Maybe<
    | UserCreateWithoutCoursesAttendingInput[]
    | UserCreateWithoutCoursesAttendingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutCoursesAttendingInput[]
    | UserUpdateWithWhereUniqueWithoutCoursesAttendingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutCoursesAttendingInput[]
    | UserUpsertWithWhereUniqueWithoutCoursesAttendingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutCoursesAttendingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCoursesAttendingDataInput;
}

export interface UserUpdateWithoutCoursesAttendingDataInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  coursesTeaching?: Maybe<CourseUpdateManyWithoutTeachersInput>;
  role?: Maybe<Role>;
}

export interface CourseUpdateManyWithoutTeachersInput {
  create?: Maybe<
    CourseCreateWithoutTeachersInput[] | CourseCreateWithoutTeachersInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutTeachersInput[]
    | CourseUpdateWithWhereUniqueWithoutTeachersInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutTeachersInput[]
    | CourseUpsertWithWhereUniqueWithoutTeachersInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutTeachersInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutTeachersDataInput;
}

export interface CourseUpdateWithoutTeachersDataInput {
  name?: Maybe<String>;
  students?: Maybe<UserUpdateManyWithoutCoursesAttendingInput>;
  term?: Maybe<TermUpdateOneRequiredWithoutCoursesInput>;
  code?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutCourseInput>;
}

export interface CourseUpsertWithWhereUniqueWithoutTeachersInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutTeachersDataInput;
  create: CourseCreateWithoutTeachersInput;
}

export interface CourseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  OR?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  NOT?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface CourseUpdateManyDataInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutCoursesAttendingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCoursesAttendingDataInput;
  create: UserCreateWithoutCoursesAttendingInput;
}

export interface CourseUpsertWithoutSessionsInput {
  update: CourseUpdateWithoutSessionsDataInput;
  create: CourseCreateWithoutSessionsInput;
}

export interface SessionUpsertWithoutQuestionsInput {
  update: SessionUpdateWithoutQuestionsDataInput;
  create: SessionCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithoutResponsesInput {
  update: QuestionUpdateWithoutResponsesDataInput;
  create: QuestionCreateWithoutResponsesInput;
}

export interface SessionUpdateOneRequiredInput {
  create?: Maybe<SessionCreateInput>;
  update?: Maybe<SessionUpdateDataInput>;
  upsert?: Maybe<SessionUpsertNestedInput>;
  connect?: Maybe<SessionWhereUniqueInput>;
}

export interface SessionUpdateDataInput {
  startsAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutSessionsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutSessionInput>;
}

export interface SessionUpsertNestedInput {
  update: SessionUpdateDataInput;
  create: SessionCreateInput;
}

export interface ResponseUpsertWithWhereUniqueWithoutAnswerInput {
  where: ResponseWhereUniqueInput;
  update: ResponseUpdateWithoutAnswerDataInput;
  create: ResponseCreateWithoutAnswerInput;
}

export interface ResponseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResponseScalarWhereInput[] | ResponseScalarWhereInput>;
  OR?: Maybe<ResponseScalarWhereInput[] | ResponseScalarWhereInput>;
  NOT?: Maybe<ResponseScalarWhereInput[] | ResponseScalarWhereInput>;
}

export interface AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutQuestionDataInput;
  create: AnswerCreateWithoutQuestionInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface QuestionUpsertWithWhereUniqueWithoutSessionInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutSessionDataInput;
  create: QuestionCreateWithoutSessionInput;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface SessionUpsertWithWhereUniqueWithoutCourseInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutCourseDataInput;
  create: SessionCreateWithoutCourseInput;
}

export interface SessionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startsAt?: Maybe<DateTimeInput>;
  startsAt_not?: Maybe<DateTimeInput>;
  startsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_lt?: Maybe<DateTimeInput>;
  startsAt_lte?: Maybe<DateTimeInput>;
  startsAt_gt?: Maybe<DateTimeInput>;
  startsAt_gte?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endsAt_not?: Maybe<DateTimeInput>;
  endsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_lt?: Maybe<DateTimeInput>;
  endsAt_lte?: Maybe<DateTimeInput>;
  endsAt_gt?: Maybe<DateTimeInput>;
  endsAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  OR?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  NOT?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
}

export interface SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput;
  data: SessionUpdateManyDataInput;
}

export interface SessionUpdateManyDataInput {
  startsAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
}

export interface CourseUpsertWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutStudentsDataInput;
  create: CourseCreateWithoutStudentsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AnswerUpdateOneRequiredWithoutResponsesInput {
  create?: Maybe<AnswerCreateWithoutResponsesInput>;
  update?: Maybe<AnswerUpdateWithoutResponsesDataInput>;
  upsert?: Maybe<AnswerUpsertWithoutResponsesInput>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface AnswerUpdateWithoutResponsesDataInput {
  text?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutAnswersInput>;
}

export interface AnswerUpsertWithoutResponsesInput {
  update: AnswerUpdateWithoutResponsesDataInput;
  create: AnswerCreateWithoutResponsesInput;
}

export interface ResponseUpsertWithWhereUniqueWithoutQuestionInput {
  where: ResponseWhereUniqueInput;
  update: ResponseUpdateWithoutQuestionDataInput;
  create: ResponseCreateWithoutQuestionInput;
}

export interface QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput;
  create: QuestionCreateWithoutAnswersInput;
}

export interface AnswerUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<UserCreateManyWithoutCoursesAttendingInput>;
  teachers?: Maybe<UserCreateManyWithoutCoursesTeachingInput>;
  term: TermCreateOneWithoutCoursesInput;
  code: String;
  sessions?: Maybe<SessionCreateManyWithoutCourseInput>;
}

export interface CourseUpdateInput {
  name?: Maybe<String>;
  students?: Maybe<UserUpdateManyWithoutCoursesAttendingInput>;
  teachers?: Maybe<UserUpdateManyWithoutCoursesTeachingInput>;
  term?: Maybe<TermUpdateOneRequiredWithoutCoursesInput>;
  code?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutCourseInput>;
}

export interface CourseUpdateManyMutationInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  order: Int;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  responses?: Maybe<ResponseCreateManyWithoutQuestionInput>;
  session: SessionCreateOneWithoutQuestionsInput;
}

export interface QuestionUpdateInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  responses?: Maybe<ResponseUpdateManyWithoutQuestionInput>;
  session?: Maybe<SessionUpdateOneRequiredWithoutQuestionsInput>;
}

export interface QuestionUpdateManyMutationInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface ResponseCreateInput {
  id?: Maybe<ID_Input>;
  student: UserCreateOneInput;
  question: QuestionCreateOneWithoutResponsesInput;
  answer: AnswerCreateOneWithoutResponsesInput;
  session: SessionCreateOneInput;
}

export interface ResponseUpdateInput {
  student?: Maybe<UserUpdateOneRequiredInput>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutResponsesInput>;
  answer?: Maybe<AnswerUpdateOneRequiredWithoutResponsesInput>;
  session?: Maybe<SessionUpdateOneRequiredInput>;
}

export interface SessionUpdateInput {
  startsAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutSessionsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutSessionInput>;
}

export interface SessionUpdateManyMutationInput {
  startsAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
}

export interface TermCreateInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  name: String;
  courses?: Maybe<CourseCreateManyWithoutTermInput>;
}

export interface CourseCreateManyWithoutTermInput {
  create?: Maybe<CourseCreateWithoutTermInput[] | CourseCreateWithoutTermInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutTermInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<UserCreateManyWithoutCoursesAttendingInput>;
  teachers?: Maybe<UserCreateManyWithoutCoursesTeachingInput>;
  code: String;
  sessions?: Maybe<SessionCreateManyWithoutCourseInput>;
}

export interface TermUpdateInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  courses?: Maybe<CourseUpdateManyWithoutTermInput>;
}

export interface CourseUpdateManyWithoutTermInput {
  create?: Maybe<CourseCreateWithoutTermInput[] | CourseCreateWithoutTermInput>;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutTermInput[]
    | CourseUpdateWithWhereUniqueWithoutTermInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutTermInput[]
    | CourseUpsertWithWhereUniqueWithoutTermInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutTermInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutTermDataInput;
}

export interface CourseUpdateWithoutTermDataInput {
  name?: Maybe<String>;
  students?: Maybe<UserUpdateManyWithoutCoursesAttendingInput>;
  teachers?: Maybe<UserUpdateManyWithoutCoursesTeachingInput>;
  code?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutCourseInput>;
}

export interface CourseUpsertWithWhereUniqueWithoutTermInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutTermDataInput;
  create: CourseCreateWithoutTermInput;
}

export interface TermUpdateManyMutationInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  coursesAttending?: Maybe<CourseUpdateManyWithoutStudentsInput>;
  coursesTeaching?: Maybe<CourseUpdateManyWithoutTeachersInput>;
  role?: Maybe<Role>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface ResponseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResponseWhereInput>;
  AND?: Maybe<
    ResponseSubscriptionWhereInput[] | ResponseSubscriptionWhereInput
  >;
  OR?: Maybe<ResponseSubscriptionWhereInput[] | ResponseSubscriptionWhereInput>;
  NOT?: Maybe<
    ResponseSubscriptionWhereInput[] | ResponseSubscriptionWhereInput
  >;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SessionWhereInput>;
  AND?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  OR?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  NOT?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
}

export interface TermSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TermWhereInput>;
  AND?: Maybe<TermSubscriptionWhereInput[] | TermSubscriptionWhereInput>;
  OR?: Maybe<TermSubscriptionWhereInput[] | TermSubscriptionWhereInput>;
  NOT?: Maybe<TermSubscriptionWhereInput[] | TermSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  text: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  question: <T = QuestionPromise>() => T;
  responses: <T = FragmentableArray<Response>>(args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  question: <T = QuestionSubscription>() => T;
  responses: <T = Promise<AsyncIterator<ResponseSubscription>>>(args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  question: <T = QuestionPromise>() => T;
  responses: <T = FragmentableArray<Response>>(args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Question {
  id: ID_Output;
  text: String;
  order: Int;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  order: () => Promise<Int>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  responses: <T = FragmentableArray<Response>>(args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  session: <T = SessionPromise>() => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  responses: <T = Promise<AsyncIterator<ResponseSubscription>>>(args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  session: <T = SessionSubscription>() => T;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  order: () => Promise<Int>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  responses: <T = FragmentableArray<Response>>(args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  session: <T = SessionPromise>() => T;
}

export interface Response {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ResponsePromise extends Promise<Response>, Fragmentable {
  id: () => Promise<ID_Output>;
  student: <T = UserPromise>() => T;
  question: <T = QuestionPromise>() => T;
  answer: <T = AnswerPromise>() => T;
  session: <T = SessionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ResponseSubscription
  extends Promise<AsyncIterator<Response>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  student: <T = UserSubscription>() => T;
  question: <T = QuestionSubscription>() => T;
  answer: <T = AnswerSubscription>() => T;
  session: <T = SessionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResponseNullablePromise
  extends Promise<Response | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  student: <T = UserPromise>() => T;
  question: <T = QuestionPromise>() => T;
  answer: <T = AnswerPromise>() => T;
  session: <T = SessionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  username: String;
  name: String;
  password: String;
  role: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  coursesAttending: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coursesTeaching: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  coursesAttending: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coursesTeaching: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  coursesAttending: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coursesTeaching: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
}

export interface Course {
  id: ID_Output;
  name: String;
  code: String;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  teachers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  term: <T = TermPromise>() => T;
  code: () => Promise<String>;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  students: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  teachers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  term: <T = TermSubscription>() => T;
  code: () => Promise<AsyncIterator<String>>;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  teachers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  term: <T = TermPromise>() => T;
  code: () => Promise<String>;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Term {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  name: String;
}

export interface TermPromise extends Promise<Term>, Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TermSubscription
  extends Promise<AsyncIterator<Term>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TermNullablePromise
  extends Promise<Term | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Session {
  id: ID_Output;
  startsAt: DateTimeOutput;
  endsAt: DateTimeOutput;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  course: <T = CoursePromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  course: <T = CourseSubscription>() => T;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SessionNullablePromise
  extends Promise<Session | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  course: <T = CoursePromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResponseConnection {
  pageInfo: PageInfo;
  edges: ResponseEdge[];
}

export interface ResponseConnectionPromise
  extends Promise<ResponseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResponseEdge>>() => T;
  aggregate: <T = AggregateResponsePromise>() => T;
}

export interface ResponseConnectionSubscription
  extends Promise<AsyncIterator<ResponseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResponseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResponseSubscription>() => T;
}

export interface ResponseEdge {
  node: Response;
  cursor: String;
}

export interface ResponseEdgePromise
  extends Promise<ResponseEdge>,
    Fragmentable {
  node: <T = ResponsePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResponseEdgeSubscription
  extends Promise<AsyncIterator<ResponseEdge>>,
    Fragmentable {
  node: <T = ResponseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResponse {
  count: Int;
}

export interface AggregateResponsePromise
  extends Promise<AggregateResponse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResponseSubscription
  extends Promise<AsyncIterator<AggregateResponse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TermConnection {
  pageInfo: PageInfo;
  edges: TermEdge[];
}

export interface TermConnectionPromise
  extends Promise<TermConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TermEdge>>() => T;
  aggregate: <T = AggregateTermPromise>() => T;
}

export interface TermConnectionSubscription
  extends Promise<AsyncIterator<TermConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TermEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTermSubscription>() => T;
}

export interface TermEdge {
  node: Term;
  cursor: String;
}

export interface TermEdgePromise extends Promise<TermEdge>, Fragmentable {
  node: <T = TermPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TermEdgeSubscription
  extends Promise<AsyncIterator<TermEdge>>,
    Fragmentable {
  node: <T = TermSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTerm {
  count: Int;
}

export interface AggregateTermPromise
  extends Promise<AggregateTerm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTermSubscription
  extends Promise<AsyncIterator<AggregateTerm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  text: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CoursePreviousValues {
  id: ID_Output;
  name: String;
  code: String;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  code: () => Promise<String>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  text: String;
  order: Int;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface ResponseSubscriptionPayload {
  mutation: MutationType;
  node: Response;
  updatedFields: String[];
  previousValues: ResponsePreviousValues;
}

export interface ResponseSubscriptionPayloadPromise
  extends Promise<ResponseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResponsePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResponsePreviousValuesPromise>() => T;
}

export interface ResponseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResponseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResponseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResponsePreviousValuesSubscription>() => T;
}

export interface ResponsePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ResponsePreviousValuesPromise
  extends Promise<ResponsePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ResponsePreviousValuesSubscription
  extends Promise<AsyncIterator<ResponsePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface SessionPreviousValues {
  id: ID_Output;
  startsAt: DateTimeOutput;
  endsAt: DateTimeOutput;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TermSubscriptionPayload {
  mutation: MutationType;
  node: Term;
  updatedFields: String[];
  previousValues: TermPreviousValues;
}

export interface TermSubscriptionPayloadPromise
  extends Promise<TermSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TermPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TermPreviousValuesPromise>() => T;
}

export interface TermSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TermSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TermSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TermPreviousValuesSubscription>() => T;
}

export interface TermPreviousValues {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  name: String;
}

export interface TermPreviousValuesPromise
  extends Promise<TermPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface TermPreviousValuesSubscription
  extends Promise<AsyncIterator<TermPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  name: String;
  password: String;
  role: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Term",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Response",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
